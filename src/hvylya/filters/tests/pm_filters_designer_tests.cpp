// Hvylya - software-defined radio framework, see https://endl.ch/projects/hvylya
//
// Copyright (C) 2019 - 2020 Alexander Tsvyashchenko <sdr@endl.ch>
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

#include <hvylya/filters/pm_filters_designer.h>

#include <hvylya/filters/tests/test_utils.h>

#include <hvylya/core/tests/common.h>

using namespace hvylya::core;
using namespace hvylya::filters;
using namespace hvylya::filters::tests;

const double hvylya::filters::tests::TapsAccuracy = 1e-8;

TEST(PmFiltersDesigner, createSimpleLowpassEven)
{
    std::vector<double> taps;
    EXPECT_TRUE(PmFiltersDesigner<double>::createLowpassFilter(taps, 0.1, 0.2, 0.1, 30.0, 1.0, FirFilterType(2)));
    checkTaps({ -0.009616405144278648, 0.01486052269455973, 0.01962033152523667, 0.005319907393683976, -0.02904217321971133, -0.05351966411113925, -0.02516913588113767, 0.07301498253843541, 0.2058302504825966, 0.3013445713291381, 0.3013445713291381, 0.2058302504825966, 0.07301498253843541, -0.02516913588113767, -0.05351966411113925, -0.02904217321971133, 0.005319907393683976, 0.01962033152523667, 0.01486052269455973, -0.009616405144278648 }, taps);
}

TEST(PmFiltersDesigner, createSimpleLowpassOdd)
{
    std::vector<double> taps;
    EXPECT_TRUE(PmFiltersDesigner<double>::createLowpassFilter(taps, 0.1, 0.2, 0.1, 30.0, 1.0, FirFilterType(1)));
    checkTaps({ -0.01043769349211155, 0.007248007199956307, 0.01843308761405976, 0.01573611184869463, -0.01135624321763203, -0.04621715577549367, -0.04804595407554589, 0.01701637439621587, 0.1399242699013058, 0.262614473094735, 0.3141105006076115, 0.262614473094735, 0.1399242699013058, 0.01701637439621587, -0.04804595407554589, -0.04621715577549367, -0.01135624321763203, 0.01573611184869463, 0.01843308761405976, 0.007248007199956307, -0.01043769349211155 }, taps);
}

TEST(PmFiltersDesigner, createSimpleLowpassAlignedEven)
{
    std::vector<double> taps;
    EXPECT_TRUE(PmFiltersDesigner<double>::createLowpassFilter(taps, 0.1, 0.2, 0.1, 30.0, 1.0, FirFilterType(2), 16));
    checkTaps( { -0.0005079318030904094, 0.002872565153173838, 0.002395068663312124, -0.001720777881935138, -0.007632027668073128, -0.008075701993359557, 0.00228704181320627, 0.01786042976845749, 0.02208310374498525, 0.001474950785224273, -0.03584917613924568, -0.05619079946950146, -0.021141151272224, 0.07891012710033268, 0.206903426717033, 0.2966450580329919, 0.2966450580329919, 0.206903426717033, 0.07891012710033268, -0.021141151272224, -0.05619079946950146, -0.03584917613924568, 0.001474950785224273, 0.02208310374498525, 0.01786042976845749, 0.00228704181320627, -0.008075701993359557, -0.007632027668073128, -0.001720777881935138, 0.002395068663312124, 0.002872565153173838, -0.0005079318030904094 }, taps);
}

TEST(PmFiltersDesigner, createSimpleLowpassAlignedOdd)
{
    std::vector<double> taps;
    EXPECT_TRUE(PmFiltersDesigner<double>::createLowpassFilter(taps, 0.1, 0.2, 0.1, 30.0, 1.0, FirFilterType(1), 16));
    checkTaps({ -0.001060690883479785, 0.001879378853331528, 0.003135620052398556, 0.00102148138657572, -0.004996013565280102, -0.009428894922280587, -0.004512549657496378, 0.01037460073733398, 0.02294081319031044, 0.0154565951763945, -0.01661710714032903, -0.05107871636569063, -0.04764099554587777, 0.02170470924327616, 0.1433162541805811, 0.2609442120839143, 0.309660600496041, 0.2609442120839143, 0.1433162541805811, 0.02170470924327616, -0.04764099554587777, -0.05107871636569063, -0.01661710714032903, 0.0154565951763945, 0.02294081319031044, 0.01037460073733398, -0.004512549657496378, -0.009428894922280587, -0.004996013565280102, 0.00102148138657572, 0.003135620052398556, 0.001879378853331528, -0.001060690883479785 }, taps);
}

TEST(PmFiltersDesigner, createLowpass)
{
    std::vector<double> taps;
    EXPECT_TRUE(PmFiltersDesigner<double>::createLowpassFilter(taps, 0.1, 0.15, 0.01, 60.0));
    checkTaps({ 0.0005160867197151642, 0.0007679537418114063, -1.374543882041362e-05, -0.0004937322028712263, -0.001364745877292356, -0.001262399663430793, -0.0003239107261771621, 0.001432656041433505, 0.002768049312732539, 0.00262950051551378, 0.0004548368472127924, -0.002832985158136066, -0.005250543775670404, -0.004714575144872436, -0.0006516051154531735, 0.005173953386998069, 0.00916973546800047, 0.007965599501438879, 0.0008489855408697227, -0.0089565792974738, -0.01542822257329654, -0.01311420490459633, -0.001035597943469091, 0.0153946838372745, 0.02620433810760501, 0.02219038131520361, 0.001188302683798964, -0.02839312601878665, -0.04950104008395258, -0.04380284921890914, -0.001288635234518974, 0.07282194917780052, 0.1579410356745505, 0.2255832031465816, 0.2513235903894769, 0.2255832031465816, 0.1579410356745505, 0.07282194917780052, -0.001288635234518974, -0.04380284921890914, -0.04950104008395258, -0.02839312601878665, 0.001188302683798964, 0.02219038131520361, 0.02620433810760501, 0.0153946838372745, -0.001035597943469091, -0.01311420490459633, -0.01542822257329654, -0.0089565792974738, 0.0008489855408697227, 0.007965599501438879, 0.00916973546800047, 0.005173953386998069, -0.0006516051154531735, -0.004714575144872436, -0.005250543775670404, -0.002832985158136066, 0.0004548368472127924, 0.00262950051551378, 0.002768049312732539, 0.001432656041433505, -0.0003239107261771621, -0.001262399663430793, -0.001364745877292356, -0.0004937322028712263, -1.374543882041362e-05, 0.0007679537418114063, 0.0005160867197151642 }, taps);
}

TEST(PmFiltersDesigner, createHighpass)
{
    std::vector<double> taps;
    EXPECT_TRUE(PmFiltersDesigner<double>::createHighpassFilter(taps, 0.3, 0.4, 0.01, 60.0));
    checkTaps({ -0.0008403001610454212, 0.0006625369898908528, 0.000853612672683171, -0.003064703593768062, 0.003203655363052194, 0.001005246270226195, -0.007596699950709983, 0.009793173943425887, -0.001519177813025787, -0.01438191029858916, 0.02393269720308517, -0.01179302262629021, -0.02196353779879538, 0.05293868732523623, -0.04375257397693027, -0.02804878738476921, 0.1461313749782714, -0.25738073966019, 0.3029567249762658, -0.25738073966019, 0.1461313749782714, -0.02804878738476921, -0.04375257397693027, 0.05293868732523623, -0.02196353779879538, -0.01179302262629021, 0.02393269720308517, -0.01438191029858916, -0.001519177813025787, 0.009793173943425887, -0.007596699950709983, 0.001005246270226195, 0.003203655363052194, -0.003064703593768062, 0.000853612672683171, 0.0006625369898908528, -0.0008403001610454212 }, taps);
}

TEST(PmFiltersDesigner, createBandpass)
{
    std::vector<double> taps;
    EXPECT_TRUE(PmFiltersDesigner<double>::createBandpassFilter(taps, 0.2, 0.25, 0.35, 0.4, 0.01, 60.0));
    checkTaps({ 0.0008091107714419077, -0.0001187055938377385, -0.0001734038615706364, -0.0004551008490778901, -0.000539621819579062, 0.002678939841361117, -0.001049639832136143, -0.002381693997415318, 0.001334556476396392, -0.0001814477772631759, 0.003808656417179189, -0.00215313107513533, -0.007432631328344293, 0.007662059732339922, 0.002122810184982749, -0.001763161132150902, -0.001763168769698923, -0.01101616232272644, 0.01648175427335011, 0.007216380806423013, -0.02094283844698854, 0.003732950089375796, -0.002329237490416069, 0.01725099208864468, 0.01212447573927315, -0.05242012763211731, 0.01711901697950993, 0.0355177092773817, -0.0130918303706968, 0.008477321058467697, -0.0834462025944516, 0.04510654522959778, 0.1670630225806053, -0.2084300342084706, -0.09009378521997852, 0.3035294220715461, -0.09009378521997852, -0.2084300342084706, 0.1670630225806053, 0.04510654522959778, -0.0834462025944516, 0.008477321058467697, -0.0130918303706968, 0.0355177092773817, 0.01711901697950993, -0.05242012763211731, 0.01212447573927315, 0.01725099208864468, -0.002329237490416069, 0.003732950089375796, -0.02094283844698854, 0.007216380806423013, 0.01648175427335011, -0.01101616232272644, -0.001763168769698923, -0.001763161132150902, 0.002122810184982749, 0.007662059732339922, -0.007432631328344293, -0.00215313107513533, 0.003808656417179189, -0.0001814477772631759, 0.001334556476396392, -0.002381693997415318, -0.001049639832136143, 0.002678939841361117, -0.000539621819579062, -0.0004551008490778901, -0.0001734038615706364, -0.0001187055938377385, 0.0008091107714419077 }, taps);
}

TEST(PmFiltersDesigner, createHilbertBandpass)
{
    std::vector<double> taps;
    EXPECT_TRUE(PmFiltersDesigner<double>::createHilbertBandpassTransform(taps, 0.05, 0.45, 0.01));
    checkTaps({ -0.0007096498995122227, 5.620826801416199e-15, -0.00193883212183796, 3.813486993886875e-15, -0.004379835495446325, 6.454785026890445e-17, -0.008590351474724773, -5.032150406963791e-15, -0.0153586075127684, -1.062715806827243e-14, -0.02578402526588374, -1.52952585997196e-14, -0.04162279021759016, -1.800110448299207e-14, -0.06631210101188757, -1.783586198630368e-14, -0.1085643989415075, -1.429863979156771e-14, -0.200455022285032, -7.985860035268859e-15, -0.6326167939526254, 3.463826418350379e-17, 0.6326167939526255, 8.027170659440958e-15, 0.200455022285032, 1.436060572782586e-14, 0.1085643989415076, 1.787717261047578e-14, 0.06631210101188764, 1.808372573133627e-14, 0.04162279021759023, 1.536755219202077e-14, 0.02578402526588382, 1.06994516605736e-14, 0.01535860751276847, 5.104443999264964e-15, 0.008590351474724844, 7.745742032268534e-18, 0.004379835495446397, -3.746357229607214e-15, 0.001938832121838032, -5.553697037136539e-15, 0.000709649899512295 }, taps);
}

TEST(PmFiltersDesigner, createHilbertHighpass)
{
    std::vector<double> taps;
    EXPECT_TRUE(PmFiltersDesigner<double>::createHilbertHighpassTransform(taps, 0.05, 0.01));
    checkTaps({ -0.0004566118304035379, -0.0006235824167232599, -0.001032079145532023, -0.001600734764142152, -0.002367765757755896, -0.003377042473093677, -0.004678687160030869, -0.00633060334470882, -0.008401401847129952, -0.01097459980853574, -0.0141562473424114, -0.01808801172627368, -0.02296952643389651, -0.029099784641635, -0.03695746453855983, -0.04736868464378942, -0.06189912902381332, -0.0839187372288345, -0.1222202414544078, -0.2091100260399568, -0.6355818019800293, 0.6355818019800293, 0.2091100260399568, 0.1222202414544078, 0.0839187372288345, 0.06189912902381332, 0.04736868464378942, 0.03695746453855983, 0.029099784641635, 0.02296952643389651, 0.01808801172627368, 0.0141562473424114, 0.01097459980853574, 0.008401401847129952, 0.00633060334470882, 0.004678687160030869, 0.003377042473093677, 0.002367765757755896, 0.001600734764142152, 0.001032079145532023, 0.0006235824167232599, 0.0004566118304035379 }, taps);
}

TEST(PmFiltersDesigner, createDifferentiator)
{
    std::vector<double> taps;
    EXPECT_TRUE(PmFiltersDesigner<double>::createDifferentiator(taps, 0.25, 0.4, 0.01, 60.0));
    checkTaps({ -0.0006607010320085037, 0.003155644267206677, -0.004160607172155628, -0.003450785071402592, 0.0176353196325387, -0.01793192024213537, -0.01558062506220304, 0.06092925710286205, -0.04894127862469034, -0.06322963286709903, 0.192095009578183, -0.1092321295449473, -0.5807903610143426, 8.220860138167601e-18, 0.5807903610143426, 0.1092321295449473, -0.192095009578183, 0.06322963286709904, 0.04894127862469037, -0.06092925710286203, 0.01558062506220304, 0.01793192024213539, -0.01763531963253869, 0.003450785071402609, 0.004160607172155645, -0.003155644267206661, 0.00066070103200852 }, taps);
}

TEST(PmFiltersDesigner, createLowpassLarge)
{
    std::vector<double> taps;
    EXPECT_TRUE(PmFiltersDesigner<double>::createLowpassFilter(taps, 0.1, 0.11, 0.01, 60.0));
    EXPECT_EQ(taps.size(), 345);
}
